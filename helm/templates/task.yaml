apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: stakater-pr-cleaner
  labels:
    app.kubernetes.io/version: "{{ .Chart.Version }}"
spec:
  params:
    - name: PR_NUMBER
      description: In case of PR, PR number that is to be used in image tag. If this field is empty it means that it's a commit on main branch
      default: "NA"
    - name: REPO_PATH
      description: Path of repository with group name
      default: "NA"
    - name: GIT_ORGANIZATION
      description: Git organization URL
      default: ""
    - name: GIT_CD_REPO
      description: The Directory to update CD manifests
      default: ""
    - name: TEAM
      description: The git revision
      default: "NA"
    - name: NAMESPACE
      description: Build namespace
    - name: USER_HOME
      description: |
        Absolute path to the user's home directory.
      type: string
      default: "~"
  stepTemplate:
    resources:
      requests:
        cpu: 250m
        memory: 1Gi
  steps:
    - name: update-cd-repo-on-merge
      image: ghcr.io/stakater/pipeline-toolbox:v0.0.42
      command: ["/bin/bash"]
      env:
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
          value: $(workspaces.basic-auth.bound)
        - name: PARAM_USER_HOME
          value: $(params.USER_HOME)
      args:
        - -c
        - |
          set -e
          
          if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
          fi
          
          if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          git config --global user.name tekton-bot
          git config --global user.email stakater-tekton-bot@stakater.com
          mkdir ~/.ssh
          ls -a ~/
          > ~/.ssh/id_rsa
          > ~/.ssh/known_hosts
          ls -a ~/.ssh
          cat "${WORKSPACE_SSH_DIRECTORY_PATH}"/id_rsa >> ~/.ssh/id_rsa
          eval `ssh-agent -s`
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
          chmod 600  ~/.ssh/id_rsa
          ssh-add ~/.ssh/id_rsa
          fi
          
          # Get the cd repo to clone
          git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"
          
          git clone $(params.GIT_CD_REPO)
          TEAM=$(params.TEAM)
          echo "TEAM is ${TEAM}"
          repo_name=$(echo $(inputs.params.GIT_CD_REPO) | awk -F'/' '{print $NF}' | sed 's/.git//')
          cd ${repo_name}
          
          if [ $(params.TEAM) == "NA" ]; then
            TEAM=$(echo $(params.NAMESPACE) | cut -d'-' -f 1)
          else
            TEAM=$(params.TEAM)
          fi
          
          echo "TEAM is ${TEAM}"
          
          REPO=$(echo $(inputs.params.REPO_PATH) | rev | cut -d'/' -f 1 | rev )
          
          echo "Repo is ${REPO}"
          
          cd *$TEAM
          
          cd apps
          
          cd *$REPO
          
          rm *preview/pr-$(inputs.params.PR_NUMBER).yaml
          
          git add .
          
          git commit -m "remove manifest for ${REPO} pr - $(inputs.params.PR_NUMBER)"
          
          git push
          while [ $? -ne 0 ]; do
            echo "Error on Push"
            echo "Pulling via Rebase"
            git pull --rebase
            echo "Pushing"
            git push
          done